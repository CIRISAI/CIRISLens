user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 4096;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # DNS resolver for Docker networks
    resolver 127.0.0.11 valid=30s;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/rss+xml application/atom+xml image/svg+xml 
               text/x-js text/x-cross-domain-policy application/x-font-ttf 
               application/x-font-opentype application/vnd.ms-fontobject 
               image/x-icon;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=public:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=admin:10m rate=1000r/m;
    limit_req_zone $binary_remote_addr zone=telemetry:10m rate=10000r/m;

    # Main server block
    server {
        listen 80;
        # SSL disabled for now - uncomment when certs are mounted
        # listen 443 ssl http2;
        server_name localhost agents.ciris.ai;

        # SSL configuration (self-signed for dev)
        # ssl_certificate /etc/nginx/ssl/cert.pem;
        # ssl_certificate_key /etc/nginx/ssl/key.pem;
        # ssl_protocols TLSv1.2 TLSv1.3;
        # ssl_ciphers HIGH:!aNULL:!MD5;
        # ssl_prefer_server_ciphers on;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Root and health check
        location / {
            root /usr/share/nginx/html;
            try_files $uri /index.html;
        }

        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # ============================
        # CIRISLens Routes
        # ============================

        # Redirect /cirislens/ to public dashboard
        location = /cirislens {
            return 301 /cirislens/;
        }

        location = /cirislens/ {
            return 301 /cirislens/public/;
        }

        # Public Dashboard (Grafana) - No auth required
        location /cirislens/public/ {
            limit_req zone=public burst=20 nodelay;
            
            # Use resolver and set variable for dynamic resolution
            set $grafana_upstream cirislens-grafana:3000;
            proxy_pass http://$grafana_upstream/;
            proxy_http_version 1.1;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Grafana WebSocket support
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Security for embedded dashboards
            add_header X-Frame-Options "SAMEORIGIN";
            add_header Content-Security-Policy "frame-ancestors 'self' https://agents.ciris.ai";
            
            # Cache static assets
            location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                set $grafana_upstream cirislens-grafana:3000;
                proxy_pass http://$grafana_upstream;
                proxy_cache_valid 200 1h;
                expires 1h;
                add_header Cache-Control "public, immutable";
            }
        }

        # Admin Interface - OAuth required
        location /cirislens/admin/ {
            limit_req zone=admin burst=50 nodelay;
            
            set $api_upstream cirislens-api:8000;
            proxy_pass http://$api_upstream/admin/;
            proxy_http_version 1.1;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Session cookie handling
            proxy_set_header Cookie $http_cookie;
            proxy_pass_header Set-Cookie;
            
            # Larger timeouts for admin operations
            proxy_read_timeout 60s;
            proxy_send_timeout 60s;
        }

        # API Routes
        location /cirislens/api/ {
            limit_req zone=admin burst=50 nodelay;
            
            set $api_upstream cirislens-api:8000;
            proxy_pass http://$api_upstream/api/;
            proxy_http_version 1.1;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CORS headers for API
            add_header Access-Control-Allow-Origin $http_origin always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
            add_header Access-Control-Allow-Credentials "true" always;
            
            # Handle preflight requests
            if ($request_method = OPTIONS) {
                return 204;
            }
        }

        # OTLP Telemetry Ingestion - High volume
        location /cirislens/v1/ {
            limit_req zone=telemetry burst=100 nodelay;
            
            set $collector_upstream cirislens-collector:4318;
            proxy_pass http://$collector_upstream/v1/;
            proxy_http_version 1.1;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # Higher timeouts for telemetry
            proxy_read_timeout 30s;
            proxy_send_timeout 30s;
            proxy_connect_timeout 5s;
            
            # Larger buffers for telemetry batches
            client_max_body_size 10m;
            client_body_buffer_size 1m;
            proxy_buffering off;
            
            # Don't log telemetry requests (too many)
            access_log off;
        }

        # WebSocket support for real-time updates
        location /cirislens/ws/ {
            set $api_upstream cirislens-api:8000;
            proxy_pass http://$api_upstream/ws/;
            proxy_http_version 1.1;
            
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # WebSocket timeouts
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
        }

        # ============================
        # Mock CIRISManager Routes (for dev)
        # ============================
        
        location /manager/ {
            root /usr/share/nginx/html;
            try_files $uri /manager/index.html;
        }

        location /manager/v1/oauth/login {
            return 302 /cirislens/admin/;
        }

        # Include additional site configurations (if any exist)
        # include /etc/nginx/sites-enabled/*.conf;
    }
}