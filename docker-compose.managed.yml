# CIRISLens Managed Docker Compose Configuration
# This configuration mimics how CIRISLens would be deployed under CIRISManager

services:
  # Mock Managed Nginx - simulates the main nginx managed by CIRISManager
  mock-managed-nginx:
    image: nginx:alpine
    container_name: mock-managed-nginx
    restart: unless-stopped
    ports:
      - "8443:443"  # Mock HTTPS port for development
      - "8080:80"   # HTTP port for development
    volumes:
      - ./nginx/managed-nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./static:/usr/share/nginx/html:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro  # For self-signed certs in dev
    depends_on:
      - cirislens-api
      - cirislens-grafana
      - cirislens-collector
    networks:
      - ciris-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # CIRISLens API Service
  cirislens-api:
    build:
      context: ./api
      dockerfile: Dockerfile
    image: cirislens-api:dev
    container_name: cirislens-api
    restart: unless-stopped
    ports:
      - "8000:8000"  # Internal only, accessed via nginx
    env_file:
      - .env
    environment:
      - ENV=${ENV:-development}
      - OAUTH_CLIENT_ID=${GOOGLE_CLIENT_ID:-mock-client-id}
      - OAUTH_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-mock-secret}
      - OAUTH_CALLBACK_URL=${OAUTH_CALLBACK_URL:-http://localhost:8080/cirislens/api/admin/auth/callback}
      - MANAGER_API_URL=${MANAGER_API_URL:-http://host.docker.internal:8888/manager/v1}
      - ALLOWED_DOMAIN=${ALLOWED_DOMAIN:-ciris.ai}
      - SESSION_SECRET=${SESSION_SECRET:-dev-secret-change-in-production}
      - DATABASE_URL=postgresql://cirislens:cirislens@cirislens-db:5432/cirislens
      - COLLECTION_INTERVAL_SECONDS=${COLLECTION_INTERVAL_SECONDS:-30}
      - OTLP_COLLECTION_ENABLED=${OTLP_COLLECTION_ENABLED:-true}
      # Agent tokens passed through from .env
      - AGENT_DATUM_TOKEN=${AGENT_DATUM_TOKEN}
      - AGENT_DATUM_URL=${AGENT_DATUM_URL}
    volumes:
      - ./api:/app
      - ./config:/app/config:ro
      - ./sql:/app/sql:ro
      - cirislens_sessions:/app/sessions
    networks:
      - ciris-network
    depends_on:
      - cirislens-db

  # CIRISLens Database (for storing configs)
  cirislens-db:
    image: postgres:15-alpine
    container_name: cirislens-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=cirislens
      - POSTGRES_USER=cirislens
      - POSTGRES_PASSWORD=cirislens
    volumes:
      - cirislens_db_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./sql/manager_tables.sql:/docker-entrypoint-initdb.d/02-manager-tables.sql:ro
    networks:
      - ciris-network

  # OpenTelemetry Collector
  cirislens-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: cirislens-collector
    restart: unless-stopped
    command: ["--config=/etc/otelcol-contrib/config.yaml"]
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter
    volumes:
      - ./config/otel-collector-simple.yaml:/etc/otelcol-contrib/config.yaml:ro
    networks:
      - ciris-network
    depends_on:
      - cirislens-prometheus
      - cirislens-loki
      - cirislens-tempo

  # Grafana
  cirislens-grafana:
    image: grafana/grafana:latest
    container_name: cirislens-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"  # Internal only, accessed via nginx
    environment:
      - GF_SERVER_ROOT_URL=http://localhost:8080/cirislens/public
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_AUTH_ANONYMOUS_ORG_NAME=Public
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - cirislens_grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - ciris-network
    depends_on:
      - cirislens-prometheus
      - cirislens-loki
      - cirislens-tempo
      - cirislens-mimir

  # Prometheus
  cirislens-prometheus:
    image: prom/prometheus:latest
    container_name: cirislens-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=1h'  # Short retention, Mimir handles long-term
      - '--web.enable-remote-write-receiver'
    ports:
      - "9090:9090"  # Internal only
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - cirislens_prometheus_data:/prometheus
    networks:
      - ciris-network

  # Loki
  cirislens-loki:
    image: grafana/loki:latest
    container_name: cirislens-loki
    restart: unless-stopped
    command: ["-config.file=/etc/loki/config.yaml"]
    ports:
      - "3100:3100"  # Internal only
    volumes:
      - ./config/loki.yaml:/etc/loki/config.yaml:ro
      - cirislens_loki_data:/loki
    networks:
      - ciris-network
    depends_on:
      - cirislens-minio

  # Tempo
  cirislens-tempo:
    image: grafana/tempo:latest
    container_name: cirislens-tempo
    restart: unless-stopped
    command: ["-config.file=/etc/tempo.yaml"]
    ports:
      - "3200:3200"   # Tempo query frontend
      - "9095:9095"   # Tempo gRPC
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml:ro
      - cirislens_tempo_data:/tmp/tempo
    networks:
      - ciris-network
    depends_on:
      - cirislens-minio

  # Mimir (long-term metrics storage)
  cirislens-mimir:
    image: grafana/mimir:latest
    container_name: cirislens-mimir
    restart: unless-stopped
    command: 
      - "-config.file=/etc/mimir.yaml"
      - "-target=all,alertmanager"
    ports:
      - "9009:9009"  # Internal only
    volumes:
      - ./config/mimir-simple.yaml:/etc/mimir.yaml:ro
      - cirislens_mimir_data:/data
    networks:
      - ciris-network
    depends_on:
      - cirislens-minio

  # MinIO (S3-compatible storage)
  cirislens-minio:
    image: minio/minio:latest
    container_name: cirislens-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=adminpassword123
      - MINIO_PROMETHEUS_AUTH_TYPE=public
    ports:
      - "9000:9000"   # MinIO API
      - "9001:9001"   # MinIO Console
    volumes:
      - cirislens_minio_data:/data
    networks:
      - ciris-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  cirislens_db_data:
  cirislens_sessions:
  cirislens_grafana_data:
  cirislens_prometheus_data:
  cirislens_loki_data:
  cirislens_tempo_data:
  cirislens_mimir_data:
  cirislens_minio_data:

networks:
  ciris-network:
    driver: bridge
    name: ciris-network