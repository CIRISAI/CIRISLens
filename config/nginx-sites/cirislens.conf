# CIRISLens public endpoint configuration
# Rate-limited, cached, and secure

# Upstream definitions
upstream grafana {
    server grafana-public:3000;
    keepalive 32;
}

upstream otel_collector {
    server otel-collector-public:4318;
    keepalive 16;
}

# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name lens.ciris.ai;
    return 301 https://$server_name$request_uri;
}

# HTTPS server
server {
    listen 443 ssl http2;
    server_name lens.ciris.ai;
    
    # SSL configuration (update with real certs)
    ssl_certificate /etc/nginx/certs/lens.ciris.ai.crt;
    ssl_certificate_key /etc/nginx/certs/lens.ciris.ai.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Root location - redirect to public dashboard
    location = / {
        return 301 /public/;
    }
    
    # Public dashboard endpoint (heavily cached and rate limited)
    location /public/ {
        limit_req zone=public_dashboard burst=20 nodelay;
        limit_req_status 429;
        
        # Enable caching for public dashboards
        proxy_cache public_cache;
        proxy_cache_valid 200 1m;
        proxy_cache_valid 404 1m;
        proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
        proxy_cache_lock on;
        proxy_cache_key "$scheme$request_method$host$request_uri";
        
        # Add cache status header for debugging
        add_header X-Cache-Status $upstream_cache_status;
        add_header Cache-Control "public, max-age=60";
        
        # Security headers for embedding
        add_header X-Frame-Options "SAMEORIGIN";
        add_header Content-Security-Policy "frame-ancestors 'self' https://*.ciris.ai";
        
        proxy_pass http://grafana/public/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support for live data
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 900s;
    }
    
    # API endpoint for metric queries (rate limited)
    location /api/v1/query {
        limit_req zone=metrics_query burst=5 nodelay;
        
        # Require API key
        if ($http_x_api_key = "") {
            return 401 '{"error":"API key required"}';
        }
        
        # Cache GET requests only
        proxy_cache api_cache;
        proxy_cache_methods GET HEAD;
        proxy_cache_valid 200 30s;
        proxy_cache_key "$scheme$request_method$host$uri$is_args$args";
        
        proxy_pass http://grafana/api/datasources/proxy/1/api/v1/query;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
    
    # Agent telemetry ingestion endpoint (authenticated)
    location /v1/metrics {
        limit_req zone=agent_ingestion burst=100 nodelay;
        
        # Check for agent token
        if ($http_x_agent_token = "") {
            return 401 '{"error":"Agent token required"}';
        }
        
        # Check agent ID header
        if ($http_x_agent_id = "") {
            return 400 '{"error":"Agent ID required"}';
        }
        
        proxy_pass http://otel_collector/v1/metrics;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Agent-ID $http_x_agent_id;
        
        # Don't cache ingestion requests
        proxy_buffering off;
        proxy_request_buffering off;
    }
    
    # Block scraping attempts
    location ~ /api/datasources {
        limit_req zone=api_scraping burst=2 nodelay;
        return 403 '{"error":"Forbidden"}';
    }
    
    # Block admin endpoints
    location ~ ^/(admin|api/admin|api/org|api/user|api/teams) {
        return 403 '{"error":"Forbidden"}';
    }
    
    # Health check endpoint (no rate limit)
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Metrics endpoint for monitoring (internal only)
    location /nginx/status {
        stub_status;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
    }
    
    # Custom error pages
    error_page 429 /429.html;
    location = /429.html {
        add_header Content-Type text/html;
        return 429 '<html><body><h1>Rate Limit Exceeded</h1><p>Please slow down your requests.</p></body></html>';
    }
    
    error_page 403 /403.html;
    location = /403.html {
        add_header Content-Type text/html;
        return 403 '<html><body><h1>Forbidden</h1><p>Access to this resource is restricted.</p></body></html>';
    }
    
    # Logging
    access_log /var/log/nginx/cirislens.access.log main;
    error_log /var/log/nginx/cirislens.error.log warn;
}